##########################################################################
## An AWS Cloudformation template for creating                           #
##      * two public web servers                                         #
## Dependent Stack - NetworkStack                                        #
## Author - Prashant Acharya                                             #
##                                                                       #
##########################################################################

{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Creates an ec2 instance or a nat instance based on the conditions. The ec2 instance can be in a public or a private subnet. Please check the parameters which decide the type of instance being created.",

  "Parameters" : {

    "NetworkStackName" : {
        "Description" : "Stack Name which was used to vpc and subnets",
        "Type": "String",
        "MinLength" : 1,
        "MaxLength" : 255,
        "Default" : "NetworkStack"
    },
    
    "InstanceType" : {
      "Description" : "Whether NAT instance or simple EC2 instance",
      "Type" : "String",
      "Default" : "ec2",
      "AllowedValues" : [ "nat" , "ec2" ],
      "ConstraintDescription" : "value must be a either nat or ec2."
    },
    
    "InternetFacing" :{
      "Description" : "Whether EC2 instance is public facing or private",
      "Type" : "String",
      "Default" : "private",
      "AllowedValues" : [ "private" , "public" ],
      "ConstraintDescription" : "value must be either public or private."    
    },
      
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default":"ABCDEF",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "WebServerName"  :{
      "Description" : "Name of the 1st WebApp Server to be displayed in the index html",
      "Type" : "String",
      "Default" : "WebApp"
    },

    "PublicSecGroupId" : {
        "Description" : "Public Security Group id",
        "Type" : "String",
        "Default" : "NA"
    },

    "PrivateSecGroupId" : {
        "Description" : "Private Security Group id",
        "Type" : "String",
        "Default" : "NA"
    },
      
    "PublicSubnetId" : {
        "Description" : "Public Subnet id",
        "Type" : "String",
        "Default" : "NA"
    },
      
    "PrivateSubnetId" : {
        "Description" : "Private Subnet id",
        "Type" : "String",
        "Default" : "NA"
    },

    "NATRouteTable": {
        "Description" : "NAT Route Table",
        "Type" : "String",
        "Default" : "NA"
    }

  },

  "Mappings" : 
  {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "HVM64"  }
    },
    
    "AWSInstanceType2NATArch" : {
      "t2.micro"    : { "Arch" : "NATHVM64"  }
    },
    
    "AWSRegionArch2AMI" : {
      "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", 
                            "HVM64" : "ami-531a4c3c", 
                            "HVMG2" : "ami-411e492e" , 
                            "NATHVM64" : "ami-0b3f4aad2015b0e15"},
      "us-east-1"        : {"PV64" : "NOT_SUPPORTED",
                            "HVM64" : "ami-467ca739", 
                            "NATHVM64" : "ami-01623d7b"}
    },
    
    "AWSInstanceType2NATArch" : {
      "t2.micro"    : { "Arch" : "NATHVM64"  }
    },

    "SubnetConfig" : {
      "Public"     :{ "CIDR" : "0.0.0.0/0" }
    }
  },
  
  "Conditions" : {
    "IsNATInstance" : {"Fn::Equals" : [{"Ref" : "InstanceType"}, "nat"]},
    "IsEC2Instance" : {"Fn::Equals" : [{"Ref" : "InstanceType"}, "ec2"]},
    "IsPublicInstance" : {"Fn::Equals" : [{"Ref" : "InternetFacing"}, "public"]},
    "IsPrivateInstance" : {"Fn::Equals" : [{"Ref" : "InternetFacing"}, "private"]},
    "HasPublicSecGroupId" : {"Fn::Equals" : [{"Ref" : "PublicSecGroupId"}, "NA"]},
    "HasPrivateSecGroupId" : {"Fn::Equals" : [{"Ref" : "PrivateSecGroupId"}, "NA"]},
    "HasPublicSubnetId" : {"Fn::Equals" : [{"Ref" : "PublicSubnetId"}, "NA"]},
    "HasPrivateSubnetId" : {"Fn::Equals" : [{"Ref" : "PrivateSubnetId"}, "NA"]},
    "HasNATRouteTable" : {"Fn::Equals" : [{"Ref" : "NATRouteTable"}, "NA"]}
  },

  "Resources" : {

    "WebApp": {
       "Type": "AWS::EC2::Instance",
       "Metadata" :
        { "Fn::If" : ["IsEC2Instance",
            { 
             "AWS::CloudFormation::Init" : {
                "configSets" : {
                 "Install_and_Configure" : [ "Install" ]
                 },
                 "Install" : {
                    "packages" : {
                     "yum" : {
                        "httpd" : []
                     }
                    },
                    "files" : {
                       "/var/www/html/index.html" : {
                         "content" : { "Fn::Join" : ["", [                        
                            "<html><h1>Hi there: This is Index page -", { "Ref" : "WebServerName" },".</h1></html>\n"
                         ]]
                         },
                         "mode" : "000644",
                         "owner" : "apache",
                         "group" : "apache"
                       },
                       "/var/www/html/health.html" : {
                         "content" : { "Fn::Join" : ["", [                        
                            "<html><h1>Hi there: This is health page - ", { "Ref" : "WebServerName" },". You are alive.</h1></html>\n"
                         ]]
                         },
                         "mode" : "000644",
                         "owner" : "apache",
                         "group" : "apache"
                       }
                    },
                    "services" : {
                        "sysvinit" : {
                        "httpd"    : { "enabled" : "true", "ensureRunning" : "true" }
                        }
                    }
                 }
             }
           },
           {
             "AWS::CloudFormation::Init" : {
                "configSets" : {
                 "Install_and_Configure" : [ "Install" ]
                 },
                 "Install" : {
                    "packages" : {
                     "yum" : {
                        "git" : []
                     }
                    }
                 }
             }
           }
         ]
        },
       "Properties": {
         "InstanceType" : "t2.micro",
         "ImageId" : { "Fn::If" : [ "IsEC2Instance",
                         { "Fn::FindInMap" : 
                            [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                             { "Fn::FindInMap" : [ "AWSInstanceType2Arch", "t2.micro", "Arch" ]}
                            ]
                         },
                         { "Fn::FindInMap" : 
                            [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                             { "Fn::FindInMap" : [ "AWSInstanceType2NATArch", "t2.micro", "Arch" ]} 
                            ] 
                         }
                     ]},
          "SourceDestCheck" : { "Fn::If" : ["IsEC2Instance",
                                            "true",
                                            "false"]
           },
          "KeyName"  : { "Ref" : "KeyName" },
          "NetworkInterfaces": [ {
              "DeviceIndex": "0",
              "GroupSet":[{ "Fn::If" : ["IsEC2Instance",
                           { "Fn::If" : ["IsPublicInstance",
                            { "Fn::If" : ["HasPublicSecGroupId",
                               {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-WebServerPubSecurityGroupID"}},
                               {"Ref" : "PublicSecGroupId"} ]},
                            {"Fn::If" :[ "HasPrivateSecGroupId",
                               {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-WebServerPvtSecurityGroupID"}},
                               {"Ref" : "PrivateSecGroupId"}]}]},
                           {"Fn::If" : ["HasPublicSecGroupId",
                               {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-WebServerPubSecurityGroupID"}},
                               {"Ref" : "PublicSecGroupId"} ]}]
                          }],
              "SubnetId":  { "Fn::If" : [ "IsEC2Instance",
                              { "Fn::If" : ["IsPublicInstance",
                                { "Fn::If" : ["HasPublicSubnetId",
                                              {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-PublicSubnetID2"}},
                                              {"Ref": "PublicSubnetId" }]},
                                { "Fn::If" :["HasPrivateSubnetId",
                                             {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-PrivateSubnetID2"}},
                                              {"Ref": "PrivateSubnetId" }]}]},
                              { "Fn::If" : ["HasPublicSubnetId",
                                            {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-PublicSubnetID2"}},
                                            {"Ref": "PublicSubnetId" }]}]
                            }
          }],
          "Tags"     : [ {"Key" : "Name", "Value" :  { "Ref" : "WebServerName" } },
                        {"Key" : "Environment", "Value" : "Dev"} ],
          "UserData" : {
            "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " --resource WebApp ",
                " --configsets Install_and_Configure ",
                " --region ", { "Ref" : "AWS::Region" } , "\n",
                "# Signal status from cfn-init ",
                "/opt/aws/bin/cfn-signal -e $? -s ", { "Ref" : "AWS::StackId" }, " --resource WebApp ",
                " --region ", { "Ref" : "AWS::Region" }
                        ]
                    ]}
          }
       }
    },
      
    "PublicRouteNAT" : {
       "Type" : "AWS::EC2::Route",
       "Condition" : "IsNATInstance",
       "Properties" : {
         "RouteTableId" :{ "Fn::If" : ["HasNATRouteTable",
                                         {"Fn::ImportValue" : {"Fn::Sub": "${NetworkStackName}-NATRouteTable"}},
                                         { "Ref" : "NATRouteTable" }]
         },
         "DestinationCidrBlock" : "0.0.0.0/0",
         "InstanceId" : { "Ref" : "WebApp" }
       }
    }
  },
  "Outputs" : {
    "WebappInstanceID" : {
       "Description": "The WebApp ID",  
       "Value" :{ "Fn::GetAtt" : [ "WebApp", "PublicDnsName" ]}
    }
  }
}
