{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation template for creating a sample Flask (Python-3.6) based web application with Redis as the backend database: This application runs in a non-default VPC in a multi-AZ, load-balanced and Autoscaled platform. The Redis server runs on an independent host in a private subnet. The Web servers run multi-AZs on private subnets. The Redis server can be accessible only from the web servers. The Web servers are hosted behind an external facing load balancer",

  "Parameters" : {
      
    "BucketName" : {
      "Description" : "Name of bucket containing source files",
      "Default":"prax-bucket",
      "Type" : "String"
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default":"MyEC2KeyPair",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "AZ1" : {
      "Description" : "Availability Zone for launching public WebApp",
      "Type" : "String",
      "Default" : "ap-south-1a",
      "AllowedValues" : [ "ap-south-1a"]
    },

    "AZ2" : {
      "Description" : "Availability Zone for launching private WebApp",
      "Type" : "String",
      "Default" : "ap-south-1b",
      "AllowedValues" : [ "ap-south-1b"]
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DBName": {
      "Default": "somedb",
      "Description" : "The database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "8",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
 
    "DBUsername": {
      "Default": "someuser",
      "NoEcho": "true",
      "Description" : "The database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
 
    "DBPassword": {
      "Default": "somepwd1234",
      "NoEcho": "true",
      "Description" : "The database admin account password",
      "Type": "String",
      "MinLength": "8"
    },
 
    "DBClass" : {
      "Default" : "db.t2.micro",
      "Description" : "Database instance class",
      "Type" : "String",
      "AllowedValues" : [ "db.t2.micro", "db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge" ],
      "ConstraintDescription" : "must select a valid database instance type."
    },
 
    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "6144",
      "ConstraintDescription" : "must be between 5+"
    }
  },

  "Mappings" : 
  {
    "Region2Examples" : {
      "ap-south-1"     : { "Examples" : "https://s3-ap-south-1.amazonaws.com/cloudformation-examples-ap-south-1" }
    },
    
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "HVM64"  }
    },
    
    "AWSInstanceType2NATArch" : {
      "t2.micro"    : { "Arch" : "NATHVM64"  }
    },
    
    "AWSRegionArch2AMI" : {
      "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-531a4c3c", "HVMG2" : "ami-411e492e" , "NATHVM64" : "ami-0b3f4aad2015b0e15"}
    },

    "SubnetConfig" : {
      "VPC"        : { "CIDR" : "10.0.0.0/16" },
      "Publicec1"  :{ "CIDR" : "10.0.5.0/24" },
      "Publicec2"  :{ "CIDR" : "10.0.6.0/24" },       
      "Private11"  :{ "CIDR" : "10.0.1.0/24" },
      "Private12"  :{ "CIDR" : "10.0.2.0/24" },
      "Private21"  :{ "CIDR" : "10.0.3.0/24" },
      "Private22"  :{ "CIDR" : "10.0.4.0/24" },
      "Public"     :{ "CIDR" : "0.0.0.0/0" }

    }
  },

  "Resources" : {

    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect"   : "Allow",
            "Action"   : [
              "cloudformation:DescribeStackResource",
              "s3:GetObject"
            ],
            "Resource" :"*"
          }]}
        }]
      }
    },

    "CfnKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "CfnUser"}
      }
    },

    "cfvpc" : {
     "Type" : "AWS::EC2::VPC",
     "Properties" : {
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [ {"Key" : "Name", "Value" : "cfvpc"} ]
     }      
    },

    "PrivateSubnet1cfvpcaz1" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Private11", "CIDR" ]},
        "MapPublicIpOnLaunch" : "false",
        "AvailabilityZone" :  { "Ref" : "AZ1"},
        "Tags" : [ { "Key" : "Name", "Value" : "PrivateSubnet1cfvpcaz1" } ]
     }
    },

    "PrivateSubnet1cfvpcaz2" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Private12", "CIDR" ]},
        "MapPublicIpOnLaunch" : "false",
        "AvailabilityZone" :  { "Ref" : "AZ2"},
        "Tags" : [ { "Key" : "Name", "Value" : "PrivateSubnet1cfvpcaz2" } ]
     }
    },
    

    "PrivateSubnet2cfvpcaz1" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Private21", "CIDR" ]},
        "MapPublicIpOnLaunch" : "false",
        "AvailabilityZone" :  { "Ref" : "AZ1"},
        "Tags" : [ { "Key" : "Name", "Value" : "PrivateSubnet2cfvpcaz1" } ]
     }
    },

    "PrivateSubnet2cfvpcaz2" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Private22", "CIDR" ]},
        "MapPublicIpOnLaunch" : "false",
        "AvailabilityZone" :  { "Ref" : "AZ2"},
        "Tags" : [ { "Key" : "Name", "Value" : "PrivateSubnet2cfvpcaz2" } ]
     }
    },

    "PublicSubnetEC2cfvpcaz" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Publicec2", "CIDR" ]},
        "MapPublicIpOnLaunch" : "true",
        "AvailabilityZone" :  { "Ref" : "AZ1"},
        "Tags" : [ { "Key" : "Name", "Value" : "PublicSubnetEC2cfvpcaz" } ]
     }
    },
      
    "PublicSubnetEC2cfvpcaz1" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Publicec1", "CIDR" ]},
        "MapPublicIpOnLaunch" : "true",
        "AvailabilityZone" :  { "Ref" : "AZ2"},
        "Tags" : [ { "Key" : "Name", "Value" : "PublicSubnetEC2cfvpcaz1" } ]
     }
    },

    "InternetGatewaycfvpc" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" :"Name", "Value" : "InternetGatewaycfvpc" } ]
      }
    },
      
    "AttachGatewaycfvpc" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "cfvpc" },
         "InternetGatewayId" : { "Ref" : "InternetGatewaycfvpc" }
       }
    },
    
    "PublicRTEC2cfvpc" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "cfvpc"},
        "Tags" : [ {"Key" : "Name", "Value" : "PublicRTEC2cfvpc"} ]
      }
    },
      
    
    "PublicRouteEC2cfvpc" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGatewaycfvpc",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRTEC2cfvpc" },
        "DestinationCidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "GatewayId" : { "Ref" : "InternetGatewaycfvpc" }
      }
    },

    "SubnetRTAssocEC2cfvpc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetEC2cfvpcaz" },
        "RouteTableId" : { "Ref" : "PublicRTEC2cfvpc" }
      }
    },
      
    "SubnetRTAssocEC2cfvpc1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetEC2cfvpcaz1" },
        "RouteTableId" : { "Ref" : "PublicRTEC2cfvpc" }
      }
    },
      
    "NATRTcfvpc" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "cfvpc"},
        "Tags" : [ {"Key" : "Name", "Value" : "NATRTcfvpc"} ]
      }
    },
    
    "NATSubnet11RTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1cfvpcaz1" },
        "RouteTableId" : { "Ref" : "NATRTcfvpc" }
      }
    }, 
      
    "NATSubnet12RTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1cfvpcaz2" },
        "RouteTableId" : { "Ref" : "NATRTcfvpc" }
      }
    }, 
      
    "NATSubnet21RTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2cfvpcaz1" },
        "RouteTableId" : { "Ref" : "NATRTcfvpc" }
      }
    },
      
    "NATSubnet22RTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2cfvpcaz2" },
        "RouteTableId" : { "Ref" : "NATRTcfvpc" }
      }
    },
    
    "NetworkAclcfvpc" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "cfvpc"},
        "Tags" : [ {"Key" : "Name", "Value" : "NetworkAclcfvpc" } ]
      }
    },
    
    "InboundHTTPNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },
      
    "InboundSSHNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "200",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },
    
    "InboundResponsePortsNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "300",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },
      
    "InboundHTTPSNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "400",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },
      
    "InboundPostgresSQLNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "500",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "5432", "To" : "5432"}
      }
    },
    
    "OutBoundHTTPNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },
    
    "OutBoundHTTPSNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "200",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },
    
    "OutBoundResponsePortsNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "300",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },
      
    "OutboundSSHNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "400",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },
      
    "OutboundPostgresSQLNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "500",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "5432", "To" : "5432"}
      }
    },
    
    "NACLSubnet1Assoccfvpcaz1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1cfvpcaz1" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
    
    "NACLSubnet1Assoccfvpcaz2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1cfvpcaz2" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NACLSubnet2Assoccfvpcaz1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2cfvpcaz1" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NACLSubnet2Assoccfvpcaz2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2cfvpcaz2" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NACLSubnetEC2Assoccfvpcaz" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetEC2cfvpcaz" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NACLSubnetEC2Assoccfvpcaz1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetEC2cfvpcaz1" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NATInstancSecuirityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}}
         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "NATInstancSecuirityGroup" }]
      }
    },
      
    "WebAppInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}}
         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "WebAppInstanceSecurityGroup" }]
      }
    },
      
    "RedisServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "Enable Access to RedisServer from Webappserver only",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "6379", "ToPort" : "6379", "SourceSecurityGroupId" : { "Ref" : "WebAppInstanceSecurityGroup"}},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "WebAppInstanceSecurityGroup"}}
         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "RedisServerSecurityGroup" }]
      }
    },

    "NATInstanceAZ1": {
       "Type": "AWS::EC2::Instance",
        "DependsOn" : "AttachGatewaycfvpc",
        "Properties": {
          "InstanceType" : { "Ref" : "InstanceType" },
          "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                     { "Fn::FindInMap" : [ "AWSInstanceType2NATArch", 
                       { "Ref" : "InstanceType" }, "Arch" ] } ] },
           "KeyName"  : { "Ref" : "KeyName" },
           "SourceDestCheck" : "false",
           "NetworkInterfaces": [ {
               "DeviceIndex": "0",
               "GroupSet": [{ "Ref" : "NATInstancSecuirityGroup" }],
               "SubnetId": { "Ref" : "PublicSubnetEC2cfvpcaz" }
                  } ],
           "Tags"     : [ {"Key" : "Name", "Value" : "NATInstanceAZ1" } ]
         }
    },

    "PublicRouteNAT" : {
       "Type" : "AWS::EC2::Route",
       "Properties" : {
         "RouteTableId" : { "Ref" : "NATRTcfvpc" },
         "DestinationCidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
         "InstanceId" : { "Ref" : "NATInstanceAZ1" }
       }
    },
      
    "RDSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn" : "AttachGatewaycfvpc",
      "Properties" : {
        "GroupDescription" : "Frontend Access",
        "VpcId"            : { "Ref" : "cfvpc" },
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort"   : 5432,
          "ToPort"     : 5432,
          "CidrIp"     :  { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]}
        }]
      }
    },

    "RDSDBParamGroup": {
        "Type": "AWS::RDS::DBParameterGroup",
        "Properties": {
            "Description": "Database Parameter Group + pg_stat_statements",
            "Family": "postgres9.6",
             "Parameters": {
                "shared_preload_libraries": "pg_stat_statements"
            }
        }
    },

    "RDSDBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
         "DBSubnetGroupDescription" : "DB Private Subnet",
         "SubnetIds" : [
          { "Ref" : "PrivateSubnet1cfvpcaz1" },
          { "Ref" : "PrivateSubnet1cfvpcaz2" },
          { "Ref" : "PrivateSubnet2cfvpcaz1" },
          { "Ref" : "PrivateSubnet2cfvpcaz2" }
         ]
      }
    },

    "pgDB" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
        "DBName" : { "Ref" : "DBName" },
        "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
        "DBInstanceClass" : { "Ref" : "DBClass" },
        "Engine" : "postgres",
        "MasterUsername" : { "Ref" : "DBUsername" } ,
        "MasterUserPassword" : { "Ref" : "DBPassword" },
        "DBSubnetGroupName" : { "Ref" : "RDSDBSubnetGroup" },
        "DBParameterGroupName" : {"Ref" : "RDSDBParamGroup" },
        "VPCSecurityGroups" : [ { "Fn::GetAtt" : [ "RDSSecurityGroup", "GroupId" ] } ]
      }
    }
  },

  "Outputs" : {
    "JDBCConnectionString": {
      "Description" : "JDBC connection string for database",
      "Value" : { "Fn::Join": [ "", [ "jdbc:postgresql://",
                                      { "Fn::GetAtt": [ "pgDB", "Endpoint.Address" ] },
                                      ":",
                                      { "Fn::GetAtt": [ "pgDB", "Endpoint.Port" ] },
                                      "/",
                                      { "Ref": "DBName" }]]}
    }
  }
}
