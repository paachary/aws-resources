##########################################################################
## An AWS Cloudformation template for creating                           #
##      * a non-default VPC                                              #
##      * public and private subnets                                     #
##      * Security Groups for public and private web servers             #
## Author - Prashant Acharya                                             #
## Default Stack Name = NetworkStack                                     #
##########################################################################
{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation template for creating network services and components required by other AWS services. The following components get created: 1 non-default VPC, 4 private subnets, 2 public subnets, 1 public security group and 1 private security group.  ",

  "Parameters" : {
      
    "BucketName" : {
      "Description" : "Name of bucket containing source files",
      "Default":"prax-bucket",
      "Type" : "String"
    },

    "AZ1" : {
      "Description" : "Availability Zone for launching public WebApp",
      "Type" : "String",
      "Default" : "ap-south-1a",
      "AllowedValues" : [ "ap-south-1a", "us-east-1a"]
    },

    "AZ2" : {
      "Description" : "Availability Zone for launching private WebApp",
      "Type" : "String",
      "Default" : "ap-south-1b",
      "AllowedValues" : [ "ap-south-1b", "us-east-1b"]
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
      
    "SubnetSufix"  :{
      "Description" : "Subnet Suffic to be utilized in the code below",
      "Type" : "String",
      "Default" : "10.0"
    }
  },

  "Mappings" : 
  {
    "Region2Examples" : {
      "ap-south-1"     : { "Examples" : "https://s3-ap-south-1.amazonaws.com/cloudformation-examples-ap-south-1" }
    },    

    "SubnetConfig" : {
      "VPC"        : { "CIDR" : "0.0/16" },
      "Publicec1"  :{ "CIDR" : "5.0/24" },
      "Publicec2"  :{ "CIDR" : "6.0/24" },
      "Private11"  :{ "CIDR" : "1.0/24" },
      "Private12"  :{ "CIDR" : "2.0/24" },
      "Private21"  :{ "CIDR" : "3.0/24" },
      "Private22"  :{ "CIDR" : "4.0/24" },
      "Public"     :{ "CIDR" : "0.0.0.0/0" }

    }
  },

  "Resources" : {

    "cfvpc" : {
     "Type" : "AWS::EC2::VPC",
     "Properties" : {
        "CidrBlock" :  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]}]]},
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [ {"Key" : "Name", "Value" : "cfvpc"} ]
     }      
    },

    "PrivateSubnet1cfvpcaz1" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" : { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private11", "CIDR" ]}]]},
        "MapPublicIpOnLaunch" : "false",
        "AvailabilityZone" :  { "Ref" : "AZ1"},
        "Tags" : [ { "Key" : "Name", "Value" : "PrivateSubnet1cfvpcaz1" } ]
     }
    },

    "PrivateSubnet1cfvpcaz2" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".", { "Fn::FindInMap" : [ "SubnetConfig", "Private12", "CIDR" ]}]]},
        "MapPublicIpOnLaunch" : "false",
        "AvailabilityZone" :  { "Ref" : "AZ2"},
        "Tags" : [ { "Key" : "Name", "Value" : "PrivateSubnet1cfvpcaz2" } ]
     }
    },
    

    "PrivateSubnet2cfvpcaz1" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".", { "Fn::FindInMap" : [ "SubnetConfig", "Private21", "CIDR" ]}]]},
        "MapPublicIpOnLaunch" : "false",
        "AvailabilityZone" :  { "Ref" : "AZ1"},
        "Tags" : [ { "Key" : "Name", "Value" : "PrivateSubnet2cfvpcaz1" } ]
     }
    },

    "PrivateSubnet2cfvpcaz2" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :   { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private22", "CIDR" ]}]]},
        "MapPublicIpOnLaunch" : "false",
        "AvailabilityZone" :  { "Ref" : "AZ2"},
        "Tags" : [ { "Key" : "Name", "Value" : "PrivateSubnet2cfvpcaz2" } ]
     }
    },

    "PublicSubnetEC2cfvpcaz" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".", { "Fn::FindInMap" : [ "SubnetConfig", "Publicec2", "CIDR" ]}]]},
        "MapPublicIpOnLaunch" : "true",
        "AvailabilityZone" :  { "Ref" : "AZ1"},
        "Tags" : [ { "Key" : "Name", "Value" : "PublicSubnetEC2cfvpcaz" } ]
     }
    },
      
    "PublicSubnetEC2cfvpcaz1" : {
     "Type" : "AWS::EC2::Subnet",
     "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "CidrBlock" :  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".", { "Fn::FindInMap" : [ "SubnetConfig", "Publicec1", "CIDR" ]}]]},
        "MapPublicIpOnLaunch" : "true",
        "AvailabilityZone" :  { "Ref" : "AZ2"},
        "Tags" : [ { "Key" : "Name", "Value" : "PublicSubnetEC2cfvpcaz1" } ]
     }
    },

    "InternetGatewaycfvpc" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" :"Name", "Value" : "InternetGatewaycfvpc" } ]
      }
    },
      
    "AttachGatewaycfvpc" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "cfvpc" },
         "InternetGatewayId" : { "Ref" : "InternetGatewaycfvpc" }
       }
    },
    
    "PublicRTEC2cfvpc" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "cfvpc"},
        "Tags" : [ {"Key" : "Name", "Value" : "PublicRTEC2cfvpc"} ]
      }
    },
      
    
    "PublicRouteEC2cfvpc" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGatewaycfvpc",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRTEC2cfvpc" },
        "DestinationCidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "GatewayId" : { "Ref" : "InternetGatewaycfvpc" }
      }
    },

    "SubnetRTAssocEC2cfvpc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetEC2cfvpcaz" },
        "RouteTableId" : { "Ref" : "PublicRTEC2cfvpc" }
      }
    },
      
    "SubnetRTAssocEC2cfvpc1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetEC2cfvpcaz1" },
        "RouteTableId" : { "Ref" : "PublicRTEC2cfvpc" }
      }
    },
      
    "NATRTcfvpc" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "cfvpc"},
        "Tags" : [ {"Key" : "Name", "Value" : "NATRTcfvpc"} ]
      }
    },
    
    "NATSubnet11RTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1cfvpcaz1" },
        "RouteTableId" : { "Ref" : "NATRTcfvpc" }
      }
    }, 
      
    "NATSubnet12RTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1cfvpcaz2" },
        "RouteTableId" : { "Ref" : "NATRTcfvpc" }
      }
    }, 
      
    "NATSubnet21RTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2cfvpcaz1" },
        "RouteTableId" : { "Ref" : "NATRTcfvpc" }
      }
    },
      
    "NATSubnet22RTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2cfvpcaz2" },
        "RouteTableId" : { "Ref" : "NATRTcfvpc" }
      }
    },
    
    "NetworkAclcfvpc" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "cfvpc"},
        "Tags" : [ {"Key" : "Name", "Value" : "NetworkAclcfvpc" } ]
      }
    },
    
    "InboundHTTPNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },
      
    "InboundSSHNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "200",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },
    
    "InboundResponsePortsNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "300",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },
      
    "InboundHTTPSNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "400",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },
      
    "InboundPostgresSQLNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "500",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "5432", "To" : "5432"}
      }
    },
    
    "OutBoundHTTPNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },
    
    "OutBoundHTTPSNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "200",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },
    
    "OutBoundResponsePortsNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "300",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },
      
    "OutboundSSHNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "400",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" :  { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },
      
    "OutboundPostgresSQLNetworkAclEntrycfvpc" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclcfvpc"},
        "RuleNumber" : "500",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
        "PortRange" : {"From" : "5432", "To" : "5432"}
      }
    },
    
    "NACLSubnet1Assoccfvpcaz1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1cfvpcaz1" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
    
    "NACLSubnet1Assoccfvpcaz2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1cfvpcaz2" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NACLSubnet2Assoccfvpcaz1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2cfvpcaz1" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NACLSubnet2Assoccfvpcaz2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2cfvpcaz2" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NACLSubnetEC2Assoccfvpcaz" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetEC2cfvpcaz" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NACLSubnetEC2Assoccfvpcaz1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetEC2cfvpcaz1" },
        "NetworkAclId" : { "Ref" : "NetworkAclcfvpc" }
      }
    },
      
    "NATInstancSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "NAT Instance Security group, allowing inbound http and https in private subnets",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22",  "CidrIp": { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80",  "CidrIp":  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private11", "CIDR" ]}]]}},
          {"IpProtocol" : "tcp", "FromPort" : "443","ToPort" : "443", "CidrIp":  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private11", "CIDR" ]}]]} },
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80",  "CidrIp":  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private12", "CIDR" ]}]]} },
          {"IpProtocol" : "tcp", "FromPort" : "443","ToPort" : "443", "CidrIp":  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private12", "CIDR" ]}]]} },
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80",  "CidrIp":  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private21", "CIDR" ]}]]} },
          {"IpProtocol" : "tcp", "FromPort" : "443","ToPort" : "443", "CidrIp":  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private21", "CIDR" ]}]]} },
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80",  "CidrIp":  { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private22", "CIDR" ]}]]} },
          {"IpProtocol" : "tcp", "FromPort" : "443","ToPort" : "443", "CidrIp": { "Fn::Join" : [ "", [{"Ref" : "SubnetSufix" },".",{ "Fn::FindInMap" : [ "SubnetConfig", "Private22", "CIDR" ]}]]} }
        ],
        "SecurityGroupEgress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp": { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}},
          {"IpProtocol" : "tcp", "FromPort" : "443","ToPort" : "443","CidrIp": { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}}
        ],
        "Tags"     : [ {"Key" : "Name", "Value" : "NATInstancSecurityGroup" }]
      }
    },
    
    "PublicELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "Public Elastics load balancer security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80",  "CidrIp": { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp": { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}}
         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "PublicELBSecurityGroup" }]
      }
    },
      
    "PvtWebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "Security Group for instances in private subnet",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80",  "SourceSecurityGroupId" : { "Ref" : "PublicELBSecurityGroup"} },
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443","SourceSecurityGroupId" : { "Ref" : "PublicELBSecurityGroup"}}
         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "PvtWebServerSecurityGroup" }]
      }
    },
      
    "WebAppInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "Public Webserver security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80",  "CidrIp": { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp": { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]}}
         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "WebAppInstanceSecurityGroup" }]
      }
    },
      
    "OrclDBServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "Oracle Database server security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "1521","ToPort" :"1521","SourceSecurityGroupId" : { "Ref" : "WebAppInstanceSecurityGroup"}}

         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "OrclDBServerSecurityGroup" }]
      }
    },
      
    "MySQLDBServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "MySQL Database server security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "3306","ToPort" :"3306","SourceSecurityGroupId" : { "Ref" : "WebAppInstanceSecurityGroup"}}
         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "MySQLDBServerSecurityGroup" }]
      }
    },
      
    "PostgreSQLDBServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "PostgresSQL Database server security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "5432","ToPort" :"5432","SourceSecurityGroupId" : { "Ref" : "WebAppInstanceSecurityGroup"}}

         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "PostgreSQLDBServerSecurityGroup" }]
      }
    },
      
    "RedisServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "cfvpc" },
        "GroupDescription" : "Redis server security group",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "6379","ToPort" :"6379","SourceSecurityGroupId" : { "Ref" : "WebAppInstanceSecurityGroup"}}

         ],
        "Tags"     : [ {"Key" : "Name", "Value" : "RedisServerSecurityGroup" }]
      }
    }
  },

  "Outputs" : {
    "NetworkStackname" : {
        "Value": "${AWS::StackName}" 
    },
    "PublicSubnet1" : {
        "Description":"Public Subnet1 used for public webservers",
        "Value":{ "Ref": "PublicSubnetEC2cfvpcaz" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PublicSubnetID1" }}
    },
    "PublicSubnet2" : {
        "Description":"Public Subnet2 used for public webservers",
        "Value":{ "Ref": "PublicSubnetEC2cfvpcaz1" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PublicSubnetID2" }}
    },
    "PrivateSubnet1" : {
        "Description":"Private Subnet1 used for public webservers",
        "Value":{ "Ref": "PrivateSubnet1cfvpcaz1" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PrivateSubnetID1" }}
    },
    "PrivateSubnet2" : {
        "Description":"Private Subnet2 used for public webservers",
        "Value":{ "Ref": "PrivateSubnet1cfvpcaz2" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PrivateSubnetID2" }}
    },
    "PrivateSubnet3" : {
        "Description":"Private Subnet3 used for public webservers",
        "Value":{ "Ref": "PrivateSubnet2cfvpcaz1" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PrivateSubnetID3" }}
    },
    "PrivateSubnet4" : {
        "Description":"Private Subnet4 used for public webservers",
        "Value":{ "Ref": "PrivateSubnet2cfvpcaz2" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PrivateSubnetID4" }}
    },
    "PublicELBSecurityGroup" : {
        "Description":"Public ELB Security Group",
        "Value":{ "Ref": "PublicELBSecurityGroup" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PublicELBSecurityGroupID" }}
    },
    "PublicWebServerSecurityGroup" : {
        "Description":"Public Security Group",
        "Value":{ "Ref": "WebAppInstanceSecurityGroup" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PublicWebServerSecurityGroupID" }}
    },
    "PrivateWebServerSecurityGroup" : {
        "Description":"Private Security Group",
        "Value":{ "Ref": "PvtWebServerSecurityGroup" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PrivateWebServerSecurityGroupID" }}
    },
    "NatInstanceSecurityGroup" : {
        "Description":"Nat Instance Security Group",
        "Value":{ "Ref": "NATInstancSecurityGroup" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-NatInstanceSecurityGroupID" }}
    },
    "OrclDBServerSecurityGroup" : {
        "Description":"Private Security Group",
        "Value":{ "Ref": "OrclDBServerSecurityGroup" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-OrclDBServerSecurityGroupID" }}
    },
    "MySQLDBServerSecurityGroup" : {
        "Description":"Private Security Group",
        "Value":{ "Ref": "MySQLDBServerSecurityGroup" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-MySQLDBServerSecurityGroupID" }}
    },
    "PostgreSQLDBServerSecurityGroup" : {
        "Description":"Private Security Group",
        "Value":{ "Ref": "PostgreSQLDBServerSecurityGroup" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-PostgreSQLDBServerSecurityGroupID" }}
    },
    "RedisServerSecurityGroup" : {
        "Description":"Private Security Group",
        "Value":{ "Ref": "RedisServerSecurityGroup" },
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-RedisServerSecurityGroupID" }}
    },
    "NATRouteTable" : {
        "Description":"Public Security Group",
        "Value":{"Ref":"NATRTcfvpc"},
        "Export":{ "Name": {"Fn::Sub": "${AWS::StackName}-NATRouteTable" }}
    }
      
  }
}
