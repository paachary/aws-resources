{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Creates a nested template based on network, ec2, sns topic, sqs queue and lambda function. Used for sns-sqs fanout application",

    "Parameters" : {

        "BucketName" : {
          "Description" : "Name of bucket containing source files",
          "Default":"ANCB",
          "Type" : "String"
        },
        
        "NewBucketName" : {
          "Description" : "Name of bucket containing source files",
          "Default":"ANCB",
          "Type" : "String"
        },
        
        "ScriptArchiveName" : {
            "Description" : "Master Script Archive Name (.zip) file contanining scripts to be executed as a part of user data for ec2. It must contain a bootstrap.sh which executes the other scripts.",
            "Type" : "String",
            "Default" : "ec2scripts.zip"
        },
        
        "KeyName": {
          "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
          "Type": "AWS::EC2::KeyPair::KeyName",
          "Default":"ABCDEF",
          "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },

        "AZ1": {
          "Description" : "Name of availability zone 1",
          "Default":"ANCB",
          "Type" : "String"
        },
        
        "AZ2": {
          "Description" : "Name of availability zone 2",
          "Default":"ANCB",
          "Type" : "String"
        },
        
        "SSHLocation" : {
          "Description" : " The IP address range that can be used to SSH to the EC2 instances",
          "Type": "String",
          "MinLength": "9",
          "MaxLength": "18",
          "Default": "0.0.0.0/0",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        
        "SubnetSufix"  :{
          "Description" : "Subnet Suffic to be utilized in the code below",
          "Type" : "String",
          "Default" : "10.0"
        },
        
        "UpdateStack" : {
            "Description" : "Is the Stack getting upgraded",
            "Type" : "String",
            "Default" : "NO"
        }
    },

    "Resources" : {
        "S3BucketPolicy" : {
            "Type" : "AWS::S3::BucketPolicy",
            "Properties" : {
                "Bucket" : {"Ref" : "BucketName" } ,
                "PolicyDocument" : {
                    "Statement": [
                        {
                            "Sid": "Stmt1528003970706",
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Effect": "Allow",
                            "Resource":  {"Fn::Sub": "arn:aws:s3:::${BucketName}/cloudformation-templates/*.json" },
                            "Principal": "*"
                        }
                    ]
                }
            }
        },
        
        "NetworkStack" : {
           "Type" : "AWS::CloudFormation::Stack",
           "Properties" : {
              "Parameters" : {
                  "SSHLocation" : { "Ref" : "SSHLocation" },
                  "BucketName"  : { "Ref" : "BucketName" },
                  "AZ1"         : { "Ref" : "AZ1" } ,
                  "AZ2"         : { "Ref" : "AZ2" },
                  "SubnetSufix" : { "Ref" : "SubnetSufix" }
              },
              "TemplateURL" : { "Fn::Join" : ["", ["https://s3.", { "Ref" : "AWS::Region" },".amazonaws.com/", { "Ref" : "BucketName" },"/cloudformation-templates/subnets_vpc_creation_template.json"]]},
              "TimeoutInMinutes" : "60"
           }
        },
        
        "SNSFanoutStack" : {
           "Type" : "AWS::CloudFormation::Stack",
           "Properties" : {
              "TemplateURL" : { "Fn::Join" : ["", ["https://s3.", { "Ref" : "AWS::Region" },".amazonaws.com/", { "Ref" : "BucketName" },"/cloudformation-templates/sns_topic_sqs_queues_creation_template.json"]]},
              "TimeoutInMinutes" : "60"
           }
        },
        
        "SNSPolicyStack" : {
           "Type" : "AWS::CloudFormation::Stack",
           "DependsOn": [ "SNSFanoutStack" ],
           "Properties" : {
              "Parameters" : {
                  "BucketName"   : { "Ref" : "BucketName" },
                  "NewBucketName": { "Ref" : "NewBucketName" },
                  "SnsTopic"     : { "Fn::GetAtt" : [ "SNSFanoutStack", "Outputs.SNSTopic" ] },
                  "SqsQueue1Arn" : { "Fn::GetAtt" : [ "SNSFanoutStack", "Outputs.FanOutQueue1ARN" ] },
                  "SqsQueue2Arn" : { "Fn::GetAtt" : [ "SNSFanoutStack", "Outputs.FanOutQueue2ARN" ] },
                  "DynamodbArn"  : { "Fn::GetAtt" : [ "SNSFanoutStack", "Outputs.DynamoDBTableARNName" ] }
              },
              "TemplateURL" : { "Fn::Join" : ["", ["https://s3.", { "Ref" : "AWS::Region" },".amazonaws.com/", { "Ref" : "BucketName" },"/cloudformation-templates/sqs_sns_role_n_policy_template.json"]]},
              "TimeoutInMinutes" : "60"
           }
        }, 

        "NatInstance": {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn": ["NetworkStack"],
            "Properties" : {
              "Parameters": {
                     "NetworkStackName" :  { "Fn::GetAtt" : [ "NetworkStack", "Outputs.NetworkStackname" ] },
                     "PublicSecGroupId" :  { "Fn::GetAtt" : [ "NetworkStack", "Outputs.NatInstanceSecurityGroup" ] },
                     "PublicSubnetId"   :  { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PublicSubnet1" ] },
                     "NATRouteTable"    :  {"Fn::GetAtt" : [ "NetworkStack", "Outputs.NATRouteTable" ] },
                     "KeyName"          :  { "Ref" : "KeyName" },
                     "WebServerName"    : "Nat-Instance",
                     "InstanceType"     : "nat",
                     "InternetFacing"   : "public"
               },
               "TemplateURL" : { "Fn::Join" : ["", ["https://s3.", { "Ref" : "AWS::Region" },".amazonaws.com/", { "Ref" : "BucketName" },"/cloudformation-templates/ec2-simple-template.json" ]]},
              "TimeoutInMinutes" : "60"
            }
        },

        "WebServer1": {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn": [ "NetworkStack", "SNSPolicyStack" ],
            "Properties" : {
              "Parameters": {
                    "NetworkStackName"   : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.NetworkStackname" ] },
                    "PublicSecGroupId"   : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PublicWebServerSecurityGroup" ] },
                    "PublicSubnetId"     : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PublicSubnet2" ] },
                    "EC2InstanceProfile" : { "Fn::GetAtt" : [ "SNSPolicyStack", "Outputs.EC2InstanceProfile" ] },
                    "KeyName"            : { "Ref" : "KeyName" },
                    "BucketName"         : { "Ref" : "BucketName" },
                    "WebServerName"      : "WebServer1",
                    "InternetFacing"     : "public",
                    "ScriptArchiveName"  : "scripts/ec2scripts.zip",
                    "TagKey"             : "DeploymentGroup",
                    "TagValue"           : "CodeDeployGroup"

               },
              "TemplateURL" : { "Fn::Join" : ["", ["https://s3.", { "Ref" : "AWS::Region" },".amazonaws.com/", { "Ref" : "BucketName" },"/cloudformation-templates/ec2-simple-template.json" ]]},
              "TimeoutInMinutes" : "60"
            }
        },

        "WebServer2": {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn": [ "NetworkStack", "SNSPolicyStack" ],
            "Properties" : {
              "Parameters": {
                    "NetworkStackName"   : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.NetworkStackname" ] },
                    "PublicSecGroupId"   : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PublicWebServerSecurityGroup" ] },
                    "PublicSubnetId"     : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PublicSubnet2" ] },
                    "EC2InstanceProfile" : { "Fn::GetAtt" : [ "SNSPolicyStack", "Outputs.EC2InstanceProfile" ] },
                    "KeyName"            : { "Ref" : "KeyName" },
                    "BucketName"         : { "Ref" : "BucketName" },
                    "WebServerName"      : "WebServer2",
                    "InternetFacing"     : "public",
                    "ScriptArchiveName"  : "scripts/ec2scripts.zip",
                    "TagKey"             : "DeploymentGroup",
                    "TagValue"           : "CodeDeployGroup1"
               },
              "TemplateURL" : { "Fn::Join" : ["", ["https://s3.", { "Ref" : "AWS::Region" },".amazonaws.com/", { "Ref" : "BucketName" },"/cloudformation-templates/ec2-simple-template.json" ]]},
              "TimeoutInMinutes" : "60"
            }
        },
        
        "InstallLambdaFunction" : {
           "Type" : "AWS::CloudFormation::Stack",
           "DependsOn": [ "NetworkStack", "SNSPolicyStack" ],
           "Properties" : {
              "Parameters" : {
                  "NewBucketName"    : { "Ref" : "NewBucketName" },
                  "BucketName"       : { "Ref" : "BucketName" },
                  "UpdateStack"      : { "Ref" : "UpdateStack" },
                  "LambdaRoleName"   : { "Fn::GetAtt" : [ "SNSPolicyStack", "Outputs.LambdaFanOutRoleARN" ] },
                  "PublicSecGroupId" : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PublicWebServerSecurityGroup" ] },
                  "PrivateSubnetId1" : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PrivateSubnet1" ] },
                  "PrivateSubnetId2" : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PrivateSubnet2" ] },
                  "PrivateSubnetId3" : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PrivateSubnet3" ] },
                  "PrivateSubnetId4" : { "Fn::GetAtt" : [ "NetworkStack", "Outputs.PrivateSubnet4" ] }
              },
              "TemplateURL" : { "Fn::Join" : ["", ["https://s3.", { "Ref" : "AWS::Region" },".amazonaws.com/", { "Ref" : "BucketName" },"/cloudformation-templates/fanout_lambda_function_template.json"]]},
              "TimeoutInMinutes" : "60"
           }
        }
    },
    "Outputs": {
       "StackRef": {"Value": { "Ref" : "NetworkStack"}}
    }
}
